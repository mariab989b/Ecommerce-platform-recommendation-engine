# docker-compose.yml - CONFIGURATION COMPLÈTE AVEC REDPANDA
version: '3.8'

services:
  # ==========================================
  # REDPANDA - Kafka Alternative
  # ==========================================
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.2.18
    container_name: redpanda-auto
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --smp 1
      - --memory 1G
      - --mode dev-container
      - --default-log-level=info
    ports:
      - "18081:18081"  # Schema Registry
      - "18082:18082"  # Pandaproxy (REST API)
      - "19092:19092"  # Kafka (external)
      - "19644:9644"   # Admin API
    volumes:
      - redpanda-data:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
    networks:
      - ecommerce-network

  # ==========================================
  # REDPANDA CONSOLE - UI pour Redpanda
  # ==========================================
  console:
    image: docker.redpanda.com/redpandadata/console:v2.3.8
    container_name: redpanda-console-auto
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    ports:
      - "8080:8080"
    depends_on:
      - redpanda
    networks:
      - ecommerce-network

  # ==========================================
  # POSTGRESQL - Base de données
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  # ==========================================
  # REDIS - Cache
  # ==========================================
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  # ==========================================
  # PRODUCER - Génère les événements
  # ==========================================
  producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    container_name: producer
    env_file: .env
    volumes:
      - ./data:/app/data
      - ./src:/app/src
    depends_on:
      redpanda:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  # ==========================================
  # CONSUMER - Traite les événements
  # ==========================================
  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    container_name: consumer
    env_file: .env
    volumes:
      - ./data:/app/data
      - ./src:/app/src
    depends_on:
      redpanda:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  # ==========================================
  # PROMETHEUS - Métriques
  # ==========================================
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - ecommerce-network

  # ==========================================
  # GRAFANA - Dashboards
  # ==========================================
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - ecommerce-network

  # ==========================================
  # AIRFLOW - Orchestration (optionnel)
  # ==========================================
  airflow-webserver:
    image: apache/airflow:2.7.0-python3.10
    container_name: airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    networks:
      - ecommerce-network
    command: webserver

volumes:
  redpanda-data:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  ecommerce-network:
    driver: bridge


